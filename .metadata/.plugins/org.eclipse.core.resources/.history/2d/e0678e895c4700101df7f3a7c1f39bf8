package com.kopo.lab0611.controller;

import java.util.HashMap;
import java.util.Locale;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kopo.lab0611.DB;
import com.kopo.lab0611.util.HashUtil;
import com.kopo.lab0611.util.TimeUtil;

@Controller
public class ApiController {
	@ResponseBody
	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public HashMap<String, String> create(Locale locale, Model model) throws Exception {
		HashMap<String, String> data = new HashMap<>();

		DB db = new DB("c:\\kopo\\tomcat.sqlite", "user");
		try {
			db.createTable();
			data.put("message", "테이블이 생성되었습니다.");
			System.out.println(data.values());
		} catch (Exception e) {
			e.printStackTrace();
			data.put("message", "테이블 생성에 실패했습니다.");
			System.out.println("DB 생성에 실패했습니다.");
		}

		return data;
	}

	@RequestMapping(value = "/signup", method = RequestMethod.GET)
	public String showSignupPage(Locale locale, Model model) {
		return "signUp";
	}

	@RequestMapping(value = "/signupAction", method = RequestMethod.POST)
	public String signUp(@RequestParam("id") String id, @RequestParam("pw") String pw,
			@RequestParam(value = "userType", defaultValue = "user") String userType,
			@RequestParam(value = "adminKey", required = false) String adminKey, @RequestParam("name") String name,
			@RequestParam("phone") String phone, @RequestParam("address") String address,
			RedirectAttributes redirectAttrs) throws Exception {
		String hashedPW = HashUtil.sha512(pw);
		String now = TimeUtil.getCurrentTimestamp();
		String SECRET_KEY = "IAMADMIN";
		System.out.println(name);
		System.out.println(address);
		if (SECRET_KEY.equals(adminKey)) {
			System.out.println(adminKey);
			userType = "ADMIN";
		}
		System.out.println(userType);
		DB db = new DB("c:\\kopo\\tomcat.sqlite", "user");
		try {
			db.insertData(id, hashedPW, name, userType, phone, address, now, now);
			// 플래시 속성으로 1회성 메시지 전달
			redirectAttrs.addFlashAttribute("msg", "회원가입이 완료되었습니다.");
		} catch (Exception e) {
			e.printStackTrace();
			redirectAttrs.addFlashAttribute("error", "회원가입 중 오류가 발생했습니다.");
			// 실패 시, 다시 가입 폼으로
			return "redirect:/signup";
		}
		// 성공 시, 메인 페이지(홈)로
		return "redirect:/";
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String showLoginPage(Locale locale, Model model) {
		return "login";
	}

	@RequestMapping(value = "/loginAction", method = RequestMethod.POST)
	public String login(@RequestParam("id") String id, @RequestParam("pw") String pw, HttpSession session,
			RedirectAttributes redirectAttrs) throws Exception {
		String hashedPW = HashUtil.sha512(pw);

		DB db = new DB("c:\\kopo\\tomcat.sqlite", "user");
		try {
			if (db.checkUser(id, pw)) {
		        System.out.println("로그인 성공");
		        // DB 에서 id/hashedPw 일치 확인 후 userType 조회
		        String userType = db.getUserType(id);  // "ADMIN" 또는 "USER"
		        
		        session.setAttribute("loginId", id);
		        session.setAttribute("userType", userType);	
			redirectAttrs.addFlashAttribute("msg", "로그인이 완료되었습니다."); }
			return "redirect:/home";
		} catch (Exception e) {
			e.printStackTrace();
			redirectAttrs.addFlashAttribute("error", "로그인 실패");
			// 실패 시, 다시 가입 폼으로
			return "redirect:/login";
		}
		// 성공 시, 메인 페이지(홈)로
		return "redirect:/";
	}

	@RequestMapping(value = "/dashboard", method = RequestMethod.GET)
	public String home(HttpSession session) {
		String type = (String) session.getAttribute("userType");
		if ("ADMIN".equals(type)) {
			// 관리자용 성적 관리 페이지
			return "adminDashboard";
		} else {
			// 일반 사용자는 통계/입력 페이지
			return "userDashboard";
		}
	}

}
