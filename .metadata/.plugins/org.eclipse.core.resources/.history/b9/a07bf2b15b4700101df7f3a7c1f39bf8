package com.kopo.lab0611;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.sqlite.SQLiteConfig;

public class DB {

	Connection connection;
	private String dbFileName;
	private String dbTableName;
	static {
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public DB(String databaseFileName, String dbTableName) {
		this.dbFileName = databaseFileName;
		this.dbTableName = dbTableName;
	}

	public boolean open() {
		try {
			SQLiteConfig config = new SQLiteConfig();
			this.connection = DriverManager.getConnection("jdbc:sqlite:/" + this.dbFileName, config.toProperties());
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public boolean close() {
		if (this.connection == null) {
			return true;
		}
		try {
			this.connection.close();
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public int createTable() throws Exception {
		this.open();
		if (this.connection == null) {
			throw new Exception("DB is not open");
		}
		String query = "CREATE TABLE IF NOT EXISTS " + this.dbTableName + " ("
				+ "idx INTEGER PRIMARY KEY AUTOINCREMENT, " + "id TEXT, " + "pwd TEXT, " + "userType TEXT, "
				+ "name TEXT, " + "phone TEXT, " + "address TEXT, " + "created TEXT, " + "lastUpdated TEXT" + ")";

		Statement statement = this.connection.createStatement();
		int result = statement.executeUpdate(query);
		statement.close();
		this.close();
		return result;
	}

	public void insertData(String id, String pwd, String name, String userType, String phone, String address,
			String created, String lastUpdated) throws SQLException {
		this.open();
		if (this.connection == null) {
			throw new SQLException("DB connection failed to open");
		}

		String sql = "INSERT INTO user " + "(id, pwd, name, userType, phone, address, created, lastUpdated) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

		try (PreparedStatement stmt = this.connection.prepareStatement(sql)) {
			stmt.setString(1, id);
			stmt.setString(2, pwd);
			stmt.setString(3, name);
			stmt.setString(4, userType);
			stmt.setString(5, phone);
			stmt.setString(6, address);
			stmt.setString(7, created);
			stmt.setString(8, lastUpdated);

			int rowsAffected = stmt.executeUpdate();
			System.out.println("Inserted rows: " + rowsAffected);

		} catch (SQLException e) {
			System.err.println("Error inserting data: " + e.getMessage());
			throw e;
		} finally {

			this.close();
		}
	}

	public boolean checkUser(String id, String pw) throws SQLException {
		this.open();
		if (this.connection == null) {
			throw new SQLException("DB connection failed to open");
		}
		try {
			String sql = "SELECT COUNT(1) FROM " + this.dbTableName + " WHERE id = ? AND pwd = ?";

			try (PreparedStatement ps = this.connection.prepareStatement(sql)) {
				ps.setString(1, id);
				ps.setString(2, pw);

				try (ResultSet rs = ps.executeQuery()) {
					if (rs.next()) {
						return rs.getInt(1) > 0;
					}
				}
			}
			return false;

		} finally {
			this.close();
		}
	}

	public void getUserType(String id) throws SQLException {
		this.open();
		if (this.connection == null) {
			throw new SQLException("DB connection failed to open");
		}
		String query = "SELECT userType FROM "+this.dbTableName+"WHERE = ?";
		
	}

	public void selectAll() {
		this.open();

		ArrayList<User> data = new ArrayList<>();
		try {
			String query = "SELECT * FROM scores";
			PreparedStatement statement = this.connection.prepareStatement(query);
			ResultSet result = statement.executeQuery();
			while (result.next()) {
				String name = result.getString("name");
				int midScore = result.getInt("midScore");
				int finScore = result.getInt("finScore");
				System.out.println(name + ", " + midScore + ", " + finScore);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		this.close();
	}
}
